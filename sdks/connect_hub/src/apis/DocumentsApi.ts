/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Document,
  DocumentsDocumentIdDelete200Response,
  DocumentsDocumentIdDownloadGet200Response,
  DocumentsDocumentIdStatusGet200Response,
  DocumentsFinalizePost200Response,
  DocumentsFinalizePostRequest,
  DocumentsGet200Response,
  DocumentsIngestionCompletePost200Response,
  DocumentsIngestionCompletePostRequest,
  DocumentsPresignPost200Response,
  DocumentsPresignPostRequest,
  ErrorResponse,
  KnowledgeSnippetsBulkPost200Response,
  KnowledgeSnippetsBulkPostRequest,
  KnowledgeSnippetsBulkPostRequestOwnershipScope,
} from '../models/index.js';
import {
    DocumentFromJSON,
    DocumentToJSON,
    DocumentsDocumentIdDelete200ResponseFromJSON,
    DocumentsDocumentIdDelete200ResponseToJSON,
    DocumentsDocumentIdDownloadGet200ResponseFromJSON,
    DocumentsDocumentIdDownloadGet200ResponseToJSON,
    DocumentsDocumentIdStatusGet200ResponseFromJSON,
    DocumentsDocumentIdStatusGet200ResponseToJSON,
    DocumentsFinalizePost200ResponseFromJSON,
    DocumentsFinalizePost200ResponseToJSON,
    DocumentsFinalizePostRequestFromJSON,
    DocumentsFinalizePostRequestToJSON,
    DocumentsGet200ResponseFromJSON,
    DocumentsGet200ResponseToJSON,
    DocumentsIngestionCompletePost200ResponseFromJSON,
    DocumentsIngestionCompletePost200ResponseToJSON,
    DocumentsIngestionCompletePostRequestFromJSON,
    DocumentsIngestionCompletePostRequestToJSON,
    DocumentsPresignPost200ResponseFromJSON,
    DocumentsPresignPost200ResponseToJSON,
    DocumentsPresignPostRequestFromJSON,
    DocumentsPresignPostRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    KnowledgeSnippetsBulkPost200ResponseFromJSON,
    KnowledgeSnippetsBulkPost200ResponseToJSON,
    KnowledgeSnippetsBulkPostRequestFromJSON,
    KnowledgeSnippetsBulkPostRequestToJSON,
    KnowledgeSnippetsBulkPostRequestOwnershipScopeFromJSON,
    KnowledgeSnippetsBulkPostRequestOwnershipScopeToJSON,
} from '../models/index.js';

export interface DocumentsDocumentIdDeleteRequest {
    documentId: string;
}

export interface DocumentsDocumentIdDownloadGetRequest {
    documentId: string;
}

export interface DocumentsDocumentIdGetRequest {
    documentId: string;
}

export interface DocumentsDocumentIdStatusGetRequest {
    documentId: string;
}

export interface DocumentsFinalizePostOperationRequest {
    documentsFinalizePostRequest: DocumentsFinalizePostRequest;
}

export interface DocumentsGetRequest {
    scope?: KnowledgeSnippetsBulkPostRequestOwnershipScope;
    owner?: string;
    type?: string;
    dateFrom?: Date;
    dateTo?: Date;
    q?: string;
    tags?: Array<string>;
    page?: number;
    limit?: number;
}

export interface DocumentsIngestionCompletePostOperationRequest {
    documentsIngestionCompletePostRequest: DocumentsIngestionCompletePostRequest;
}

export interface DocumentsPresignPostOperationRequest {
    documentsPresignPostRequest: DocumentsPresignPostRequest;
}

export interface KnowledgeSnippetsBulkPostOperationRequest {
    knowledgeSnippetsBulkPostRequest: KnowledgeSnippetsBulkPostRequest;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     * Delete document and all related snippets
     */
    async documentsDocumentIdDeleteRaw(requestParameters: DocumentsDocumentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsDocumentIdDelete200Response>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsDocumentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/{documentId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsDocumentIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete document and all related snippets
     */
    async documentsDocumentIdDelete(requestParameters: DocumentsDocumentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsDocumentIdDelete200Response> {
        const response = await this.documentsDocumentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get presigned download URL for document
     */
    async documentsDocumentIdDownloadGetRaw(requestParameters: DocumentsDocumentIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsDocumentIdDownloadGet200Response>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsDocumentIdDownloadGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/{documentId}/download`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsDocumentIdDownloadGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get presigned download URL for document
     */
    async documentsDocumentIdDownloadGet(requestParameters: DocumentsDocumentIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsDocumentIdDownloadGet200Response> {
        const response = await this.documentsDocumentIdDownloadGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get document details by ID
     */
    async documentsDocumentIdGetRaw(requestParameters: DocumentsDocumentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsDocumentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/{documentId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Get document details by ID
     */
    async documentsDocumentIdGet(requestParameters: DocumentsDocumentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.documentsDocumentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get document processing status
     */
    async documentsDocumentIdStatusGetRaw(requestParameters: DocumentsDocumentIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsDocumentIdStatusGet200Response>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsDocumentIdStatusGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/{documentId}/status`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsDocumentIdStatusGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get document processing status
     */
    async documentsDocumentIdStatusGet(requestParameters: DocumentsDocumentIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsDocumentIdStatusGet200Response> {
        const response = await this.documentsDocumentIdStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark document as uploaded and trigger ingestion
     */
    async documentsFinalizePostRaw(requestParameters: DocumentsFinalizePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsFinalizePost200Response>> {
        if (requestParameters['documentsFinalizePostRequest'] == null) {
            throw new runtime.RequiredError(
                'documentsFinalizePostRequest',
                'Required parameter "documentsFinalizePostRequest" was null or undefined when calling documentsFinalizePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/finalize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentsFinalizePostRequestToJSON(requestParameters['documentsFinalizePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsFinalizePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Mark document as uploaded and trigger ingestion
     */
    async documentsFinalizePost(requestParameters: DocumentsFinalizePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsFinalizePost200Response> {
        const response = await this.documentsFinalizePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List documents with optional filters
     */
    async documentsGetRaw(requestParameters: DocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = (requestParameters['dateFrom'] as any).toISOString();
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = (requestParameters['dateTo'] as any).toISOString();
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List documents with optional filters
     */
    async documentsGet(requestParameters: DocumentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsGet200Response> {
        const response = await this.documentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark document ingestion as complete (internal)
     */
    async documentsIngestionCompletePostRaw(requestParameters: DocumentsIngestionCompletePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsIngestionCompletePost200Response>> {
        if (requestParameters['documentsIngestionCompletePostRequest'] == null) {
            throw new runtime.RequiredError(
                'documentsIngestionCompletePostRequest',
                'Required parameter "documentsIngestionCompletePostRequest" was null or undefined when calling documentsIngestionCompletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/documents/ingestion-complete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentsIngestionCompletePostRequestToJSON(requestParameters['documentsIngestionCompletePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsIngestionCompletePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Mark document ingestion as complete (internal)
     */
    async documentsIngestionCompletePost(requestParameters: DocumentsIngestionCompletePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsIngestionCompletePost200Response> {
        const response = await this.documentsIngestionCompletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate presigned S3 upload URL for document
     */
    async documentsPresignPostRaw(requestParameters: DocumentsPresignPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsPresignPost200Response>> {
        if (requestParameters['documentsPresignPostRequest'] == null) {
            throw new runtime.RequiredError(
                'documentsPresignPostRequest',
                'Required parameter "documentsPresignPostRequest" was null or undefined when calling documentsPresignPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/presign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentsPresignPostRequestToJSON(requestParameters['documentsPresignPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsPresignPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Generate presigned S3 upload URL for document
     */
    async documentsPresignPost(requestParameters: DocumentsPresignPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsPresignPost200Response> {
        const response = await this.documentsPresignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk insert knowledge snippets (internal)
     */
    async knowledgeSnippetsBulkPostRaw(requestParameters: KnowledgeSnippetsBulkPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KnowledgeSnippetsBulkPost200Response>> {
        if (requestParameters['knowledgeSnippetsBulkPostRequest'] == null) {
            throw new runtime.RequiredError(
                'knowledgeSnippetsBulkPostRequest',
                'Required parameter "knowledgeSnippetsBulkPostRequest" was null or undefined when calling knowledgeSnippetsBulkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/knowledge_snippets/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KnowledgeSnippetsBulkPostRequestToJSON(requestParameters['knowledgeSnippetsBulkPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KnowledgeSnippetsBulkPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Bulk insert knowledge snippets (internal)
     */
    async knowledgeSnippetsBulkPost(requestParameters: KnowledgeSnippetsBulkPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KnowledgeSnippetsBulkPost200Response> {
        const response = await this.knowledgeSnippetsBulkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
