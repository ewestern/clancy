/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  DocumentsDocumentIdTagsPost200Response,
  DocumentsDocumentIdTagsPostRequest,
  ErrorResponse,
  TagsGet200Response,
  TagsPost200Response,
  TagsPostRequest,
} from '../models/index.js';
import {
    DocumentsDocumentIdTagsPost200ResponseFromJSON,
    DocumentsDocumentIdTagsPost200ResponseToJSON,
    DocumentsDocumentIdTagsPostRequestFromJSON,
    DocumentsDocumentIdTagsPostRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TagsGet200ResponseFromJSON,
    TagsGet200ResponseToJSON,
    TagsPost200ResponseFromJSON,
    TagsPost200ResponseToJSON,
    TagsPostRequestFromJSON,
    TagsPostRequestToJSON,
} from '../models/index.js';

export interface DocumentsDocumentIdTagsPostOperationRequest {
    documentId: string;
    documentsDocumentIdTagsPostRequest: DocumentsDocumentIdTagsPostRequest;
}

export interface DocumentsDocumentIdTagsTagIdDeleteRequest {
    documentId: string;
    tagId: string;
}

export interface TagsGetRequest {
    search?: string;
    page?: number;
    limit?: number;
}

export interface TagsPostOperationRequest {
    tagsPostRequest: TagsPostRequest;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Attach a tag to a document (create tag by name if needed)
     */
    async documentsDocumentIdTagsPostRaw(requestParameters: DocumentsDocumentIdTagsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsDocumentIdTagsPost200Response>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsDocumentIdTagsPost().'
            );
        }

        if (requestParameters['documentsDocumentIdTagsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'documentsDocumentIdTagsPostRequest',
                'Required parameter "documentsDocumentIdTagsPostRequest" was null or undefined when calling documentsDocumentIdTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/{documentId}/tags`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentsDocumentIdTagsPostRequestToJSON(requestParameters['documentsDocumentIdTagsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsDocumentIdTagsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Attach a tag to a document (create tag by name if needed)
     */
    async documentsDocumentIdTagsPost(requestParameters: DocumentsDocumentIdTagsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsDocumentIdTagsPost200Response> {
        const response = await this.documentsDocumentIdTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach a tag from a document
     */
    async documentsDocumentIdTagsTagIdDeleteRaw(requestParameters: DocumentsDocumentIdTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsDocumentIdTagsPost200Response>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsDocumentIdTagsTagIdDelete().'
            );
        }

        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling documentsDocumentIdTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/documents/{documentId}/tags/{tagId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))).replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters['tagId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsDocumentIdTagsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Detach a tag from a document
     */
    async documentsDocumentIdTagsTagIdDelete(requestParameters: DocumentsDocumentIdTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsDocumentIdTagsPost200Response> {
        const response = await this.documentsDocumentIdTagsTagIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tags with usage counts
     */
    async tagsGetRaw(requestParameters: TagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List tags with usage counts
     */
    async tagsGet(requestParameters: TagsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsGet200Response> {
        const response = await this.tagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a tag in the organization (idempotent by name)
     */
    async tagsPostRaw(requestParameters: TagsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsPost200Response>> {
        if (requestParameters['tagsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'tagsPostRequest',
                'Required parameter "tagsPostRequest" was null or undefined when calling tagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagsPostRequestToJSON(requestParameters['tagsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a tag in the organization (idempotent by name)
     */
    async tagsPost(requestParameters: TagsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsPost200Response> {
        const response = await this.tagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
