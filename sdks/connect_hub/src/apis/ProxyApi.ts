/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OauthLaunchProviderGet400Response,
} from '../models/index';
import {
    OauthLaunchProviderGet400ResponseFromJSON,
    OauthLaunchProviderGet400ResponseToJSON,
} from '../models/index';

export interface ProxyProviderIdCapabilityIdPostRequest {
    orgId: string;
    providerId: string;
    capabilityId: string;
    body?: any | null;
}

/**
 * 
 */
export class ProxyApi extends runtime.BaseAPI {

    /**
     * Proxies action requests
     */
    async proxyProviderIdCapabilityIdPostRaw(requestParameters: ProxyProviderIdCapabilityIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling proxyProviderIdCapabilityIdPost().'
            );
        }

        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling proxyProviderIdCapabilityIdPost().'
            );
        }

        if (requestParameters['capabilityId'] == null) {
            throw new runtime.RequiredError(
                'capabilityId',
                'Required parameter "capabilityId" was null or undefined when calling proxyProviderIdCapabilityIdPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orgId'] != null) {
            queryParameters['orgId'] = requestParameters['orgId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/proxy/{providerId}/{capabilityId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))).replace(`{${"capabilityId"}}`, encodeURIComponent(String(requestParameters['capabilityId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Proxies action requests
     */
    async proxyProviderIdCapabilityIdPost(requestParameters: ProxyProviderIdCapabilityIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.proxyProviderIdCapabilityIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
