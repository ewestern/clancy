/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CapabilitiesProviderIdCapabilityIdGet404Response,
  ProviderCapabilities,
  ProviderCapability,
} from '../models/index';
import {
    CapabilitiesProviderIdCapabilityIdGet404ResponseFromJSON,
    CapabilitiesProviderIdCapabilityIdGet404ResponseToJSON,
    ProviderCapabilitiesFromJSON,
    ProviderCapabilitiesToJSON,
    ProviderCapabilityFromJSON,
    ProviderCapabilityToJSON,
} from '../models/index';

export interface CapabilitiesProviderIdCapabilityIdGetRequest {
    orgId: string;
    providerId: string;
    capabilityId: string;
}

/**
 * 
 */
export class CapabilitiesApi extends runtime.BaseAPI {

    /**
     * Returns the catalog of provider capabilities available to the platform.
     */
    async capabilitiesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProviderCapabilities>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/capabilities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderCapabilitiesFromJSON));
    }

    /**
     * Returns the catalog of provider capabilities available to the platform.
     */
    async capabilitiesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProviderCapabilities>> {
        const response = await this.capabilitiesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * retrieves a capability from a provider
     */
    async capabilitiesProviderIdCapabilityIdGetRaw(requestParameters: CapabilitiesProviderIdCapabilityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderCapability>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling capabilitiesProviderIdCapabilityIdGet().'
            );
        }

        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling capabilitiesProviderIdCapabilityIdGet().'
            );
        }

        if (requestParameters['capabilityId'] == null) {
            throw new runtime.RequiredError(
                'capabilityId',
                'Required parameter "capabilityId" was null or undefined when calling capabilitiesProviderIdCapabilityIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orgId'] != null) {
            queryParameters['orgId'] = requestParameters['orgId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/capabilities/{providerId}/{capabilityId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))).replace(`{${"capabilityId"}}`, encodeURIComponent(String(requestParameters['capabilityId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderCapabilityFromJSON(jsonValue));
    }

    /**
     * retrieves a capability from a provider
     */
    async capabilitiesProviderIdCapabilityIdGet(requestParameters: CapabilitiesProviderIdCapabilityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderCapability> {
        const response = await this.capabilitiesProviderIdCapabilityIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
