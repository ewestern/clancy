/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  Trigger,
  TriggerRegistration,
  TriggerRegistrationsPost400Response,
  TriggersParamOptionsGet200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TriggerFromJSON,
    TriggerToJSON,
    TriggerRegistrationFromJSON,
    TriggerRegistrationToJSON,
    TriggerRegistrationsPost400ResponseFromJSON,
    TriggerRegistrationsPost400ResponseToJSON,
    TriggersParamOptionsGet200ResponseFromJSON,
    TriggersParamOptionsGet200ResponseToJSON,
} from '../models/index.js';

export interface TriggerRegistrationsPostRequest {
    triggerRegistration?: Omit<TriggerRegistration, 'id'|'createdAt'|'updatedAt'>;
}

export interface TriggersParamOptionsGetRequest {
    providerId: string;
    triggerId: string;
}

export interface TriggersProviderIdTriggerIdGetRequest {
    providerId: string;
    triggerId: string;
}

/**
 * 
 */
export class TriggersApi extends runtime.BaseAPI {

    /**
     */
    async triggerRegistrationsPostRaw(requestParameters: TriggerRegistrationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TriggerRegistration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trigger-registrations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TriggerRegistrationToJSON(requestParameters['triggerRegistration']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggerRegistrationFromJSON(jsonValue));
    }

    /**
     */
    async triggerRegistrationsPost(requestParameters: TriggerRegistrationsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TriggerRegistration> {
        const response = await this.triggerRegistrationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async triggersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Trigger>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/triggers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TriggerFromJSON));
    }

    /**
     */
    async triggersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Trigger>> {
        const response = await this.triggersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async triggersParamOptionsGetRaw(requestParameters: TriggersParamOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TriggersParamOptionsGet200Response>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling triggersParamOptionsGet().'
            );
        }

        if (requestParameters['triggerId'] == null) {
            throw new runtime.RequiredError(
                'triggerId',
                'Required parameter "triggerId" was null or undefined when calling triggersParamOptionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/triggers/param-options`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))).replace(`{${"triggerId"}}`, encodeURIComponent(String(requestParameters['triggerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggersParamOptionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async triggersParamOptionsGet(requestParameters: TriggersParamOptionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TriggersParamOptionsGet200Response> {
        const response = await this.triggersParamOptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async triggersProviderIdTriggerIdGetRaw(requestParameters: TriggersProviderIdTriggerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trigger>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling triggersProviderIdTriggerIdGet().'
            );
        }

        if (requestParameters['triggerId'] == null) {
            throw new runtime.RequiredError(
                'triggerId',
                'Required parameter "triggerId" was null or undefined when calling triggersProviderIdTriggerIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/triggers/{providerId}/{triggerId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))).replace(`{${"triggerId"}}`, encodeURIComponent(String(requestParameters['triggerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggerFromJSON(jsonValue));
    }

    /**
     */
    async triggersProviderIdTriggerIdGet(requestParameters: TriggersProviderIdTriggerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trigger> {
        const response = await this.triggersProviderIdTriggerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
