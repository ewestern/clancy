/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CapabilitiesProviderIdCapabilityIdGet404Response,
  ConnectionsGet200ResponseInner,
  ConnectionsIdPatchRequest,
} from '../models/index';
import {
    CapabilitiesProviderIdCapabilityIdGet404ResponseFromJSON,
    CapabilitiesProviderIdCapabilityIdGet404ResponseToJSON,
    ConnectionsGet200ResponseInnerFromJSON,
    ConnectionsGet200ResponseInnerToJSON,
    ConnectionsIdPatchRequestFromJSON,
    ConnectionsIdPatchRequestToJSON,
} from '../models/index';

export interface ConnectionsIdPatchOperationRequest {
    id: string;
    connectionsIdPatchRequest: ConnectionsIdPatchRequest;
}

/**
 * 
 */
export class ConnectionApi extends runtime.BaseAPI {

    /**
     * Get all connections
     */
    async connectionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConnectionsGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionsGet200ResponseInnerFromJSON));
    }

    /**
     * Get all connections
     */
    async connectionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConnectionsGet200ResponseInner>> {
        const response = await this.connectionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update connection status
     */
    async connectionsIdPatchRaw(requestParameters: ConnectionsIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionsGet200ResponseInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling connectionsIdPatch().'
            );
        }

        if (requestParameters['connectionsIdPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'connectionsIdPatchRequest',
                'Required parameter "connectionsIdPatchRequest" was null or undefined when calling connectionsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionsIdPatchRequestToJSON(requestParameters['connectionsIdPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionsGet200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Update connection status
     */
    async connectionsIdPatch(requestParameters: ConnectionsIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionsGet200ResponseInner> {
        const response = await this.connectionsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
