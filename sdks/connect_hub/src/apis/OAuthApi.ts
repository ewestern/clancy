/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  OauthCallbackProviderGet200Response,
  OauthLaunchProviderGet302Response,
} from '../models/index.js';
import {
    OauthCallbackProviderGet200ResponseFromJSON,
    OauthCallbackProviderGet200ResponseToJSON,
    OauthLaunchProviderGet302ResponseFromJSON,
    OauthLaunchProviderGet302ResponseToJSON,
} from '../models/index.js';

export interface OauthCallbackProviderGetRequest {
    code: string;
    state: string;
    provider: string;
    error?: string;
    errorDescription?: string;
    errorUri?: string;
}

export interface OauthLaunchProviderGetRequest {
    permissions: Array<string>;
    token: string;
    provider: string;
}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI {

    /**
     * Handle OAuth callback from provider
     */
    async oauthCallbackProviderGetRaw(requestParameters: OauthCallbackProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OauthCallbackProviderGet200Response>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling oauthCallbackProviderGet().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling oauthCallbackProviderGet().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oauthCallbackProviderGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['error'] != null) {
            queryParameters['error'] = requestParameters['error'];
        }

        if (requestParameters['errorDescription'] != null) {
            queryParameters['errorDescription'] = requestParameters['errorDescription'];
        }

        if (requestParameters['errorUri'] != null) {
            queryParameters['errorUri'] = requestParameters['errorUri'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/callback/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OauthCallbackProviderGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Handle OAuth callback from provider
     */
    async oauthCallbackProviderGet(requestParameters: OauthCallbackProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OauthCallbackProviderGet200Response> {
        const response = await this.oauthCallbackProviderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launch OAuth authorization flow
     */
    async oauthLaunchProviderGetRaw(requestParameters: OauthLaunchProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['permissions'] == null) {
            throw new runtime.RequiredError(
                'permissions',
                'Required parameter "permissions" was null or undefined when calling oauthLaunchProviderGet().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling oauthLaunchProviderGet().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oauthLaunchProviderGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['permissions'] != null) {
            queryParameters['permissions'] = requestParameters['permissions'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/oauth/launch/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Launch OAuth authorization flow
     */
    async oauthLaunchProviderGet(requestParameters: OauthLaunchProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauthLaunchProviderGetRaw(requestParameters, initOverrides);
    }

}
