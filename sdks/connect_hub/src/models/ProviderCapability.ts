/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { ProviderAuth } from './ProviderAuth.js';
import {
    ProviderAuthFromJSON,
    ProviderAuthFromJSONTyped,
    ProviderAuthToJSON,
    ProviderAuthToJSONTyped,
} from './ProviderAuth.js';
import type { Capability } from './Capability.js';
import {
    CapabilityFromJSON,
    CapabilityFromJSONTyped,
    CapabilityToJSON,
    CapabilityToJSONTyped,
} from './Capability.js';
import type { ProviderKind } from './ProviderKind.js';
import {
    ProviderKindFromJSON,
    ProviderKindFromJSONTyped,
    ProviderKindToJSON,
    ProviderKindToJSONTyped,
} from './ProviderKind.js';

/**
 * 
 * @export
 * @interface ProviderCapability
 */
export interface ProviderCapability {
    /**
     * 
     * @type {Capability}
     * @memberof ProviderCapability
     */
    capability: Capability;
    /**
     * Provider slug, e.g. slack
     * @type {string}
     * @memberof ProviderCapability
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderCapability
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderCapability
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderCapability
     */
    icon: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderCapability
     */
    docsUrl?: string;
    /**
     * 
     * @type {ProviderKind}
     * @memberof ProviderCapability
     */
    kind: ProviderKind;
    /**
     * 
     * @type {ProviderAuth}
     * @memberof ProviderCapability
     */
    auth: ProviderAuth;
}



/**
 * Check if a given object implements the ProviderCapability interface.
 */
export function instanceOfProviderCapability(value: object): value is ProviderCapability {
    if (!('capability' in value) || value['capability'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('kind' in value) || value['kind'] === undefined) return false;
    if (!('auth' in value) || value['auth'] === undefined) return false;
    return true;
}

export function ProviderCapabilityFromJSON(json: any): ProviderCapability {
    return ProviderCapabilityFromJSONTyped(json, false);
}

export function ProviderCapabilityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProviderCapability {
    if (json == null) {
        return json;
    }
    return {
        
        'capability': CapabilityFromJSON(json['capability']),
        'id': json['id'],
        'displayName': json['displayName'],
        'description': json['description'],
        'icon': json['icon'],
        'docsUrl': json['docsUrl'] == null ? undefined : json['docsUrl'],
        'kind': ProviderKindFromJSON(json['kind']),
        'auth': ProviderAuthFromJSON(json['auth']),
    };
}

export function ProviderCapabilityToJSON(json: any): ProviderCapability {
    return ProviderCapabilityToJSONTyped(json, false);
}

export function ProviderCapabilityToJSONTyped(value?: ProviderCapability | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'capability': CapabilityToJSON(value['capability']),
        'id': value['id'],
        'displayName': value['displayName'],
        'description': value['description'],
        'icon': value['icon'],
        'docsUrl': value['docsUrl'],
        'kind': ProviderKindToJSON(value['kind']),
        'auth': ProviderAuthToJSON(value['auth']),
    };
}

