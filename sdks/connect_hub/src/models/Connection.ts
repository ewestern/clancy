/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    orgId: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    providerId: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    status: ConnectionStatusEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Connection
     */
    metadata: { [key: string]: any; };
}


/**
 * @export
 */
export const ConnectionStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Error: 'error'
} as const;
export type ConnectionStatusEnum = typeof ConnectionStatusEnum[keyof typeof ConnectionStatusEnum];


/**
 * Check if a given object implements the Connection interface.
 */
export function instanceOfConnection(value: object): value is Connection {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('orgId' in value) || value['orgId'] === undefined) return false;
    if (!('providerId' in value) || value['providerId'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function ConnectionFromJSON(json: any): Connection {
    return ConnectionFromJSONTyped(json, false);
}

export function ConnectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connection {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'orgId': json['orgId'],
        'providerId': json['providerId'],
        'displayName': json['displayName'],
        'status': json['status'],
        'metadata': json['metadata'],
    };
}

export function ConnectionToJSON(json: any): Connection {
    return ConnectionToJSONTyped(json, false);
}

export function ConnectionToJSONTyped(value?: Connection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'orgId': value['orgId'],
        'providerId': value['providerId'],
        'displayName': value['displayName'],
        'status': value['status'],
        'metadata': value['metadata'],
    };
}

