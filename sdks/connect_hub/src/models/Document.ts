/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { DocumentStatus } from './DocumentStatus.js';
import {
    DocumentStatusFromJSON,
    DocumentStatusFromJSONTyped,
    DocumentStatusToJSON,
    DocumentStatusToJSONTyped,
} from './DocumentStatus.js';
import type { Tag } from './Tag.js';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
    TagToJSONTyped,
} from './Tag.js';
import type { KnowledgeSnippetsBulkPostRequestOwnershipScope } from './KnowledgeSnippetsBulkPostRequestOwnershipScope.js';
import {
    KnowledgeSnippetsBulkPostRequestOwnershipScopeFromJSON,
    KnowledgeSnippetsBulkPostRequestOwnershipScopeFromJSONTyped,
    KnowledgeSnippetsBulkPostRequestOwnershipScopeToJSON,
    KnowledgeSnippetsBulkPostRequestOwnershipScopeToJSONTyped,
} from './KnowledgeSnippetsBulkPostRequestOwnershipScope.js';

/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    orgId: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    documentId: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    documentType: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    documentUri: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    mimeType: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    sizeBytes: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    uploaderUserId: string;
    /**
     * 
     * @type {KnowledgeSnippetsBulkPostRequestOwnershipScope}
     * @memberof Document
     */
    ownershipScope: KnowledgeSnippetsBulkPostRequestOwnershipScope;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    ownerId: string;
    /**
     * 
     * @type {DocumentStatus}
     * @memberof Document
     */
    status: DocumentStatus;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Document
     */
    tags: Array<Tag>;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    updatedAt: string;
}



/**
 * Check if a given object implements the Document interface.
 */
export function instanceOfDocument(value: object): value is Document {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('orgId' in value) || value['orgId'] === undefined) return false;
    if (!('documentId' in value) || value['documentId'] === undefined) return false;
    if (!('documentType' in value) || value['documentType'] === undefined) return false;
    if (!('documentUri' in value) || value['documentUri'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    if (!('sizeBytes' in value) || value['sizeBytes'] === undefined) return false;
    if (!('uploaderUserId' in value) || value['uploaderUserId'] === undefined) return false;
    if (!('ownershipScope' in value) || value['ownershipScope'] === undefined) return false;
    if (!('ownerId' in value) || value['ownerId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DocumentFromJSON(json: any): Document {
    return DocumentFromJSONTyped(json, false);
}

export function DocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Document {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'orgId': json['orgId'],
        'documentId': json['documentId'],
        'documentType': json['documentType'],
        'documentUri': json['documentUri'],
        'title': json['title'],
        'mimeType': json['mimeType'],
        'sizeBytes': json['sizeBytes'],
        'uploaderUserId': json['uploaderUserId'],
        'ownershipScope': KnowledgeSnippetsBulkPostRequestOwnershipScopeFromJSON(json['ownershipScope']),
        'ownerId': json['ownerId'],
        'status': DocumentStatusFromJSON(json['status']),
        'tags': ((json['tags'] as Array<any>).map(TagFromJSON)),
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function DocumentToJSON(json: any): Document {
    return DocumentToJSONTyped(json, false);
}

export function DocumentToJSONTyped(value?: Document | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'orgId': value['orgId'],
        'documentId': value['documentId'],
        'documentType': value['documentType'],
        'documentUri': value['documentUri'],
        'title': value['title'],
        'mimeType': value['mimeType'],
        'sizeBytes': value['sizeBytes'],
        'uploaderUserId': value['uploaderUserId'],
        'ownershipScope': KnowledgeSnippetsBulkPostRequestOwnershipScopeToJSON(value['ownershipScope']),
        'ownerId': value['ownerId'],
        'status': DocumentStatusToJSON(value['status']),
        'tags': ((value['tags'] as Array<any>).map(TagToJSON)),
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

