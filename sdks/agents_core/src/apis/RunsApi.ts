/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ActivityEvent,
  AgentRunStatus,
  Run,
  V1AgentsPost400Response,
} from '../models/index.js';
import {
    ActivityEventFromJSON,
    ActivityEventToJSON,
    AgentRunStatusFromJSON,
    AgentRunStatusToJSON,
    RunFromJSON,
    RunToJSON,
    V1AgentsPost400ResponseFromJSON,
    V1AgentsPost400ResponseToJSON,
} from '../models/index.js';

export interface V1RunsEventsGetRequest {
    employeeId: string;
    agentId?: string;
    limit?: number;
    offset?: number;
}

export interface V1RunsGetRequest {
    employeeId?: string;
    agentId?: string;
    status?: AgentRunStatus;
    limit?: number;
    offset?: number;
    includeActions?: boolean;
}

export interface V1RunsIdGetRequest {
    id: string;
}

/**
 * 
 */
export class RunsApi extends runtime.BaseAPI {

    /**
     * List flattened activity events from runs and actions
     * List run events for activity log
     */
    async v1RunsEventsGetRaw(requestParameters: V1RunsEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActivityEvent>>> {
        if (requestParameters['employeeId'] == null) {
            throw new runtime.RequiredError(
                'employeeId',
                'Required parameter "employeeId" was null or undefined when calling v1RunsEventsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['employeeId'] != null) {
            queryParameters['employeeId'] = requestParameters['employeeId'];
        }

        if (requestParameters['agentId'] != null) {
            queryParameters['agentId'] = requestParameters['agentId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/runs/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityEventFromJSON));
    }

    /**
     * List flattened activity events from runs and actions
     * List run events for activity log
     */
    async v1RunsEventsGet(requestParameters: V1RunsEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActivityEvent>> {
        const response = await this.v1RunsEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List runs with optional filtering
     * List runs
     */
    async v1RunsGetRaw(requestParameters: V1RunsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Run>>> {
        const queryParameters: any = {};

        if (requestParameters['employeeId'] != null) {
            queryParameters['employeeId'] = requestParameters['employeeId'];
        }

        if (requestParameters['agentId'] != null) {
            queryParameters['agentId'] = requestParameters['agentId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['includeActions'] != null) {
            queryParameters['includeActions'] = requestParameters['includeActions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/runs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RunFromJSON));
    }

    /**
     * List runs with optional filtering
     * List runs
     */
    async v1RunsGet(requestParameters: V1RunsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Run>> {
        const response = await this.v1RunsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a run by ID with its actions
     * Get a run by ID
     */
    async v1RunsIdGetRaw(requestParameters: V1RunsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Run>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1RunsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RunFromJSON(jsonValue));
    }

    /**
     * Get a run by ID with its actions
     * Get a run by ID
     */
    async v1RunsIdGet(requestParameters: V1RunsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Run> {
        const response = await this.v1RunsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
