/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApprovalRequest,
  V1AgentsPost400Response,
  V1ApprovalsIdPutRequest,
} from '../models/index';
import {
    ApprovalRequestFromJSON,
    ApprovalRequestToJSON,
    V1AgentsPost400ResponseFromJSON,
    V1AgentsPost400ResponseToJSON,
    V1ApprovalsIdPutRequestFromJSON,
    V1ApprovalsIdPutRequestToJSON,
} from '../models/index';

export interface V1ApprovalsGetRequest {
    status?: V1ApprovalsGetStatusEnum;
}

export interface V1ApprovalsIdGetRequest {
    id: string;
}

export interface V1ApprovalsIdPutOperationRequest {
    id: string;
    v1ApprovalsIdPutRequest?: V1ApprovalsIdPutRequest;
}

export interface V1ApprovalsPostRequest {
    approvalRequest?: Omit<ApprovalRequest, 'id'|'createdAt'|'updatedAt'>;
}

/**
 * 
 */
export class ApprovalsApi extends runtime.BaseAPI {

    /**
     * Get approval requests
     * Get approval requests
     */
    async v1ApprovalsGetRaw(requestParameters: V1ApprovalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApprovalRequest>>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/approvals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApprovalRequestFromJSON));
    }

    /**
     * Get approval requests
     * Get approval requests
     */
    async v1ApprovalsGet(requestParameters: V1ApprovalsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApprovalRequest>> {
        const response = await this.v1ApprovalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an approval request by ID
     * Get an approval request
     */
    async v1ApprovalsIdGetRaw(requestParameters: V1ApprovalsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApprovalRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1ApprovalsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/approvals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApprovalRequestFromJSON(jsonValue));
    }

    /**
     * Get an approval request by ID
     * Get an approval request
     */
    async v1ApprovalsIdGet(requestParameters: V1ApprovalsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApprovalRequest> {
        const response = await this.v1ApprovalsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an approval request
     * Update an approval request
     */
    async v1ApprovalsIdPutRaw(requestParameters: V1ApprovalsIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApprovalRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1ApprovalsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/approvals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1ApprovalsIdPutRequestToJSON(requestParameters['v1ApprovalsIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApprovalRequestFromJSON(jsonValue));
    }

    /**
     * Update an approval request
     * Update an approval request
     */
    async v1ApprovalsIdPut(requestParameters: V1ApprovalsIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApprovalRequest> {
        const response = await this.v1ApprovalsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an approval request
     * Create an approval request
     */
    async v1ApprovalsPostRaw(requestParameters: V1ApprovalsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApprovalRequest>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/approvals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApprovalRequestToJSON(requestParameters['approvalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApprovalRequestFromJSON(jsonValue));
    }

    /**
     * Create an approval request
     * Create an approval request
     */
    async v1ApprovalsPost(requestParameters: V1ApprovalsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApprovalRequest> {
        const response = await this.v1ApprovalsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const V1ApprovalsGetStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;
export type V1ApprovalsGetStatusEnum = typeof V1ApprovalsGetStatusEnum[keyof typeof V1ApprovalsGetStatusEnum];
