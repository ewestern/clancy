/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Agent,
  V1AgentsIdPutRequest,
  V1AgentsPost400Response,
} from '../models/index';
import {
    AgentFromJSON,
    AgentToJSON,
    V1AgentsIdPutRequestFromJSON,
    V1AgentsIdPutRequestToJSON,
    V1AgentsPost400ResponseFromJSON,
    V1AgentsPost400ResponseToJSON,
} from '../models/index';

export interface V1AgentsGetRequest {
    orgId: string;
}

export interface V1AgentsIdDeleteRequest {
    id: string;
}

export interface V1AgentsIdGetRequest {
    id: string;
}

export interface V1AgentsIdPutOperationRequest {
    id: string;
    v1AgentsIdPutRequest?: V1AgentsIdPutRequest;
}

export interface V1AgentsPostRequest {
    agent?: Agent;
}

/**
 * 
 */
export class AgentsApi extends runtime.BaseAPI {

    /**
     * List agents
     * List agents
     */
    async v1AgentsGetRaw(requestParameters: V1AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Agent>>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling v1AgentsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orgId'] != null) {
            queryParameters['orgId'] = requestParameters['orgId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/agents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgentFromJSON));
    }

    /**
     * List agents
     * List agents
     */
    async v1AgentsGet(requestParameters: V1AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Agent>> {
        const response = await this.v1AgentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an agent
     * Delete an agent
     */
    async v1AgentsIdDeleteRaw(requestParameters: V1AgentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1AgentsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/agents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an agent
     * Delete an agent
     */
    async v1AgentsIdDelete(requestParameters: V1AgentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1AgentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get an agent
     * Get an agent
     */
    async v1AgentsIdGetRaw(requestParameters: V1AgentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1AgentsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/agents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     * Get an agent
     * Get an agent
     */
    async v1AgentsIdGet(requestParameters: V1AgentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Agent> {
        const response = await this.v1AgentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an agent
     * Update an agent
     */
    async v1AgentsIdPutRaw(requestParameters: V1AgentsIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Agent>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1AgentsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/agents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1AgentsIdPutRequestToJSON(requestParameters['v1AgentsIdPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     * Update an agent
     * Update an agent
     */
    async v1AgentsIdPut(requestParameters: V1AgentsIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Agent> {
        const response = await this.v1AgentsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an agent
     * Create an agent
     */
    async v1AgentsPostRaw(requestParameters: V1AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Agent>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/agents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentToJSON(requestParameters['agent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentFromJSON(jsonValue));
    }

    /**
     * Create an agent
     * Create an agent
     */
    async v1AgentsPost(requestParameters: V1AgentsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Agent> {
        const response = await this.v1AgentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
