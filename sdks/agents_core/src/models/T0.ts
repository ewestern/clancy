/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AgentStatus } from './AgentStatus';
import {
    AgentStatusFromJSON,
    AgentStatusFromJSONTyped,
    AgentStatusToJSON,
    AgentStatusToJSONTyped,
} from './AgentStatus';
import type { AgentScope } from './AgentScope';
import {
    AgentScopeFromJSON,
    AgentScopeFromJSONTyped,
    AgentScopeToJSON,
    AgentScopeToJSONTyped,
} from './AgentScope';
import type { V1AgentsIdPutRequestCapabilitiesInner } from './V1AgentsIdPutRequestCapabilitiesInner';
import {
    V1AgentsIdPutRequestCapabilitiesInnerFromJSON,
    V1AgentsIdPutRequestCapabilitiesInnerFromJSONTyped,
    V1AgentsIdPutRequestCapabilitiesInnerToJSON,
    V1AgentsIdPutRequestCapabilitiesInnerToJSONTyped,
} from './V1AgentsIdPutRequestCapabilitiesInner';

/**
 * 
 * @export
 * @interface T0
 */
export interface T0 {
    /**
     * 
     * @type {string}
     * @memberof T0
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof T0
     */
    orgId: string;
    /**
     * 
     * @type {string}
     * @memberof T0
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof T0
     */
    description: string;
    /**
     * 
     * @type {AgentScope}
     * @memberof T0
     */
    scope: AgentScope;
    /**
     * 
     * @type {string}
     * @memberof T0
     */
    ownerId: string;
    /**
     * 
     * @type {AgentStatus}
     * @memberof T0
     */
    status: AgentStatus;
    /**
     * 
     * @type {Array<V1AgentsIdPutRequestCapabilitiesInner>}
     * @memberof T0
     */
    capabilities: Array<V1AgentsIdPutRequestCapabilitiesInner>;
    /**
     * 
     * @type {V1AgentsIdPutRequestCapabilitiesInner}
     * @memberof T0
     */
    trigger: V1AgentsIdPutRequestCapabilitiesInner;
    /**
     * 
     * @type {string}
     * @memberof T0
     */
    prompt: string;
    /**
     * 
     * @type {Array<T0>}
     * @memberof T0
     */
    subagents?: Array<T0>;
}



/**
 * Check if a given object implements the T0 interface.
 */
export function instanceOfT0(value: object): value is T0 {
    if (!('orgId' in value) || value['orgId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('ownerId' in value) || value['ownerId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('capabilities' in value) || value['capabilities'] === undefined) return false;
    if (!('trigger' in value) || value['trigger'] === undefined) return false;
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    return true;
}

export function T0FromJSON(json: any): T0 {
    return T0FromJSONTyped(json, false);
}

export function T0FromJSONTyped(json: any, ignoreDiscriminator: boolean): T0 {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'orgId': json['orgId'],
        'name': json['name'],
        'description': json['description'],
        'scope': AgentScopeFromJSON(json['scope']),
        'ownerId': json['ownerId'],
        'status': AgentStatusFromJSON(json['status']),
        'capabilities': ((json['capabilities'] as Array<any>).map(V1AgentsIdPutRequestCapabilitiesInnerFromJSON)),
        'trigger': V1AgentsIdPutRequestCapabilitiesInnerFromJSON(json['trigger']),
        'prompt': json['prompt'],
        'subagents': json['subagents'] == null ? undefined : ((json['subagents'] as Array<any>).map(T0FromJSON)),
    };
}

export function T0ToJSON(json: any): T0 {
    return T0ToJSONTyped(json, false);
}

export function T0ToJSONTyped(value?: T0 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'orgId': value['orgId'],
        'name': value['name'],
        'description': value['description'],
        'scope': AgentScopeToJSON(value['scope']),
        'ownerId': value['ownerId'],
        'status': AgentStatusToJSON(value['status']),
        'capabilities': ((value['capabilities'] as Array<any>).map(V1AgentsIdPutRequestCapabilitiesInnerToJSON)),
        'trigger': V1AgentsIdPutRequestCapabilitiesInnerToJSON(value['trigger']),
        'prompt': value['prompt'],
        'subagents': value['subagents'] == null ? undefined : ((value['subagents'] as Array<any>).map(T0ToJSON)),
    };
}

