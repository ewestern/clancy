/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime.js";
/**
 *
 * @export
 * @interface WebhookPostRequestAnyOf6
 */
export interface WebhookPostRequestAnyOf6 {
  /**
   *
   * @type {string}
   * @memberof WebhookPostRequestAnyOf6
   */
  type: WebhookPostRequestAnyOf6TypeEnum;
  /**
   *
   * @type {string}
   * @memberof WebhookPostRequestAnyOf6
   */
  orgId: string;
  /**
   *
   * @type {string}
   * @memberof WebhookPostRequestAnyOf6
   */
  timestamp: string;
  /**
   *
   * @type {string}
   * @memberof WebhookPostRequestAnyOf6
   */
  agentId: string;
  /**
   *
   * @type {string}
   * @memberof WebhookPostRequestAnyOf6
   */
  executionId: string;
  /**
   *
   * @type {string}
   * @memberof WebhookPostRequestAnyOf6
   */
  model: string;
  /**
   *
   * @type {number}
   * @memberof WebhookPostRequestAnyOf6
   */
  promptTokens: number;
  /**
   *
   * @type {number}
   * @memberof WebhookPostRequestAnyOf6
   */
  completionTokens: number;
  /**
   *
   * @type {number}
   * @memberof WebhookPostRequestAnyOf6
   */
  totalTokens: number;
  /**
   *
   * @type {string}
   * @memberof WebhookPostRequestAnyOf6
   */
  prompt: string;
}

/**
 * @export
 */
export const WebhookPostRequestAnyOf6TypeEnum = {
  Llmusage: "llmusage",
} as const;
export type WebhookPostRequestAnyOf6TypeEnum =
  (typeof WebhookPostRequestAnyOf6TypeEnum)[keyof typeof WebhookPostRequestAnyOf6TypeEnum];

/**
 * Check if a given object implements the WebhookPostRequestAnyOf6 interface.
 */
export function instanceOfWebhookPostRequestAnyOf6(
  value: object,
): value is WebhookPostRequestAnyOf6 {
  if (!("type" in value) || value["type"] === undefined) return false;
  if (!("orgId" in value) || value["orgId"] === undefined) return false;
  if (!("timestamp" in value) || value["timestamp"] === undefined) return false;
  if (!("agentId" in value) || value["agentId"] === undefined) return false;
  if (!("executionId" in value) || value["executionId"] === undefined)
    return false;
  if (!("model" in value) || value["model"] === undefined) return false;
  if (!("promptTokens" in value) || value["promptTokens"] === undefined)
    return false;
  if (!("completionTokens" in value) || value["completionTokens"] === undefined)
    return false;
  if (!("totalTokens" in value) || value["totalTokens"] === undefined)
    return false;
  if (!("prompt" in value) || value["prompt"] === undefined) return false;
  return true;
}

export function WebhookPostRequestAnyOf6FromJSON(
  json: any,
): WebhookPostRequestAnyOf6 {
  return WebhookPostRequestAnyOf6FromJSONTyped(json, false);
}

export function WebhookPostRequestAnyOf6FromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): WebhookPostRequestAnyOf6 {
  if (json == null) {
    return json;
  }
  return {
    type: json["type"],
    orgId: json["orgId"],
    timestamp: json["timestamp"],
    agentId: json["agentId"],
    executionId: json["executionId"],
    model: json["model"],
    promptTokens: json["promptTokens"],
    completionTokens: json["completionTokens"],
    totalTokens: json["totalTokens"],
    prompt: json["prompt"],
  };
}

export function WebhookPostRequestAnyOf6ToJSON(
  json: any,
): WebhookPostRequestAnyOf6 {
  return WebhookPostRequestAnyOf6ToJSONTyped(json, false);
}

export function WebhookPostRequestAnyOf6ToJSONTyped(
  value?: WebhookPostRequestAnyOf6 | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    type: value["type"],
    orgId: value["orgId"],
    timestamp: value["timestamp"],
    agentId: value["agentId"],
    executionId: value["executionId"],
    model: value["model"],
    promptTokens: value["promptTokens"],
    completionTokens: value["completionTokens"],
    totalTokens: value["totalTokens"],
    prompt: value["prompt"],
  };
}
