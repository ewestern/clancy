/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime.js";
import type { AgentRunStatus } from "./AgentRunStatus.js";
import {
  AgentRunStatusFromJSON,
  AgentRunStatusFromJSONTyped,
  AgentRunStatusToJSON,
  AgentRunStatusToJSONTyped,
} from "./AgentRunStatus.js";
import type { RunAction } from "./RunAction.js";
import {
  RunActionFromJSON,
  RunActionFromJSONTyped,
  RunActionToJSON,
  RunActionToJSONTyped,
} from "./RunAction.js";

/**
 *
 * @export
 * @interface Run
 */
export interface Run {
  /**
   *
   * @type {string}
   * @memberof Run
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  agentId: string;
  /**
   *
   * @type {string}
   * @memberof Run
   */
  executionId: string;
  /**
   *
   * @type {AgentRunStatus}
   * @memberof Run
   */
  status: AgentRunStatus;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof Run
   */
  result: { [key: string]: any };
  /**
   *
   * @type {Date}
   * @memberof Run
   */
  runStartedAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Run
   */
  runCompletedAt?: Date;
  /**
   *
   * @type {Array<RunAction>}
   * @memberof Run
   */
  actions?: Array<RunAction>;
}

/**
 * Check if a given object implements the Run interface.
 */
export function instanceOfRun(value: object): value is Run {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("agentId" in value) || value["agentId"] === undefined) return false;
  if (!("executionId" in value) || value["executionId"] === undefined)
    return false;
  if (!("status" in value) || value["status"] === undefined) return false;
  if (!("result" in value) || value["result"] === undefined) return false;
  if (!("runStartedAt" in value) || value["runStartedAt"] === undefined)
    return false;
  return true;
}

export function RunFromJSON(json: any): Run {
  return RunFromJSONTyped(json, false);
}

export function RunFromJSONTyped(json: any, ignoreDiscriminator: boolean): Run {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    agentId: json["agentId"],
    executionId: json["executionId"],
    status: AgentRunStatusFromJSON(json["status"]),
    result: json["result"],
    runStartedAt: new Date(json["runStartedAt"]),
    runCompletedAt:
      json["runCompletedAt"] == null
        ? undefined
        : new Date(json["runCompletedAt"]),
    actions:
      json["actions"] == null
        ? undefined
        : (json["actions"] as Array<any>).map(RunActionFromJSON),
  };
}

export function RunToJSON(json: any): Run {
  return RunToJSONTyped(json, false);
}

export function RunToJSONTyped(
  value?: Run | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    agentId: value["agentId"],
    executionId: value["executionId"],
    status: AgentRunStatusToJSON(value["status"]),
    result: value["result"],
    runStartedAt: value["runStartedAt"].toISOString(),
    runCompletedAt:
      value["runCompletedAt"] == null
        ? undefined
        : value["runCompletedAt"].toISOString(),
    actions:
      value["actions"] == null
        ? undefined
        : (value["actions"] as Array<any>).map(RunActionToJSON),
  };
}
