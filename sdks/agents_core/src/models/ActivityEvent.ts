/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AgentActionStatus } from './AgentActionStatus.js';
import {
    AgentActionStatusFromJSON,
    AgentActionStatusFromJSONTyped,
    AgentActionStatusToJSON,
    AgentActionStatusToJSONTyped,
} from './AgentActionStatus.js';

/**
 * 
 * @export
 * @interface ActivityEvent
 */
export interface ActivityEvent {
    /**
     * 
     * @type {string}
     * @memberof ActivityEvent
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof ActivityEvent
     */
    timestamp: Date;
    /**
     * 
     * @type {AgentActionStatus}
     * @memberof ActivityEvent
     */
    type: AgentActionStatus;
    /**
     * 
     * @type {string}
     * @memberof ActivityEvent
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof ActivityEvent
     */
    durationMs?: number;
    /**
     * 
     * @type {string}
     * @memberof ActivityEvent
     */
    runId: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityEvent
     */
    workflowId: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityEvent
     */
    workflowName: string;
}



/**
 * Check if a given object implements the ActivityEvent interface.
 */
export function instanceOfActivityEvent(value: object): value is ActivityEvent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('runId' in value) || value['runId'] === undefined) return false;
    if (!('workflowId' in value) || value['workflowId'] === undefined) return false;
    if (!('workflowName' in value) || value['workflowName'] === undefined) return false;
    return true;
}

export function ActivityEventFromJSON(json: any): ActivityEvent {
    return ActivityEventFromJSONTyped(json, false);
}

export function ActivityEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'timestamp': (new Date(json['timestamp'])),
        'type': AgentActionStatusFromJSON(json['type']),
        'message': json['message'],
        'durationMs': json['durationMs'] == null ? undefined : json['durationMs'],
        'runId': json['runId'],
        'workflowId': json['workflowId'],
        'workflowName': json['workflowName'],
    };
}

export function ActivityEventToJSON(json: any): ActivityEvent {
    return ActivityEventToJSONTyped(json, false);
}

export function ActivityEventToJSONTyped(value?: ActivityEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'timestamp': ((value['timestamp']).toISOString()),
        'type': AgentActionStatusToJSON(value['type']),
        'message': value['message'],
        'durationMs': value['durationMs'],
        'runId': value['runId'],
        'workflowId': value['workflowId'],
        'workflowName': value['workflowName'],
    };
}

