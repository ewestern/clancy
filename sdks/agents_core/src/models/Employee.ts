/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime.js";
import type { Agent } from "./Agent.js";
import {
  AgentFromJSON,
  AgentFromJSONTyped,
  AgentToJSON,
  AgentToJSONTyped,
} from "./Agent.js";
import type { EmployeeStatus } from "./EmployeeStatus.js";
import {
  EmployeeStatusFromJSON,
  EmployeeStatusFromJSONTyped,
  EmployeeStatusToJSON,
  EmployeeStatusToJSONTyped,
} from "./EmployeeStatus.js";

/**
 *
 * @export
 * @interface Employee
 */
export interface Employee {
  /**
   *
   * @type {string}
   * @memberof Employee
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Employee
   */
  orgId: string;
  /**
   *
   * @type {string}
   * @memberof Employee
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof Employee
   */
  name: string;
  /**
   *
   * @type {EmployeeStatus}
   * @memberof Employee
   */
  status: EmployeeStatus;
  /**
   *
   * @type {Array<Agent>}
   * @memberof Employee
   */
  agents: Array<Agent>;
}

/**
 * Check if a given object implements the Employee interface.
 */
export function instanceOfEmployee(value: object): value is Employee {
  if (!("orgId" in value) || value["orgId"] === undefined) return false;
  if (!("userId" in value) || value["userId"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("status" in value) || value["status"] === undefined) return false;
  if (!("agents" in value) || value["agents"] === undefined) return false;
  return true;
}

export function EmployeeFromJSON(json: any): Employee {
  return EmployeeFromJSONTyped(json, false);
}

export function EmployeeFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Employee {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    orgId: json["orgId"],
    userId: json["userId"],
    name: json["name"],
    status: EmployeeStatusFromJSON(json["status"]),
    agents: (json["agents"] as Array<any>).map(AgentFromJSON),
  };
}

export function EmployeeToJSON(json: any): Employee {
  return EmployeeToJSONTyped(json, false);
}

export function EmployeeToJSONTyped(
  value?: Employee | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    orgId: value["orgId"],
    userId: value["userId"],
    name: value["name"],
    status: EmployeeStatusToJSON(value["status"]),
    agents: (value["agents"] as Array<any>).map(AgentToJSON),
  };
}
