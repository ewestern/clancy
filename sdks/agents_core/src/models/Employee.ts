/* tslint:disable */
/* eslint-disable */
/**
 * Agent-Core API
 * Agent-Core Service - Control plane for multi-agent workflow orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Agent } from './Agent';
import {
    AgentFromJSON,
    AgentFromJSONTyped,
    AgentToJSON,
    AgentToJSONTyped,
} from './Agent';
import type { EmployeeStatus } from './EmployeeStatus';
import {
    EmployeeStatusFromJSON,
    EmployeeStatusFromJSONTyped,
    EmployeeStatusToJSON,
    EmployeeStatusToJSONTyped,
} from './EmployeeStatus';

/**
 * 
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    orgId: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    summary: string;
    /**
     * 
     * @type {EmployeeStatus}
     * @memberof Employee
     */
    status: EmployeeStatus;
    /**
     * 
     * @type {Array<Agent>}
     * @memberof Employee
     */
    agents: Array<Agent>;
}



/**
 * Check if a given object implements the Employee interface.
 */
export function instanceOfEmployee(value: object): value is Employee {
    if (!('orgId' in value) || value['orgId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('summary' in value) || value['summary'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('agents' in value) || value['agents'] === undefined) return false;
    return true;
}

export function EmployeeFromJSON(json: any): Employee {
    return EmployeeFromJSONTyped(json, false);
}

export function EmployeeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Employee {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'orgId': json['orgId'],
        'name': json['name'],
        'summary': json['summary'],
        'status': EmployeeStatusFromJSON(json['status']),
        'agents': ((json['agents'] as Array<any>).map(AgentFromJSON)),
    };
}

export function EmployeeToJSON(json: any): Employee {
    return EmployeeToJSONTyped(json, false);
}

export function EmployeeToJSONTyped(value?: Employee | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'orgId': value['orgId'],
        'name': value['name'],
        'summary': value['summary'],
        'status': EmployeeStatusToJSON(value['status']),
        'agents': ((value['agents'] as Array<any>).map(AgentToJSON)),
    };
}

