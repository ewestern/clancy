/* tslint:disable */
/* eslint-disable */
/**
 * ConnectHub API
 * Unified integration, token, and proxy layer for Clancy Digital-Employees
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CapabilitiesGet200ResponseInner
 */
export interface CapabilitiesGet200ResponseInner {
    /**
     * Provider slug, e.g. slack
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'docsUrl'?: string;
    /**
     * 
     * @type {CapabilitiesGet200ResponseInnerKind}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'kind': CapabilitiesGet200ResponseInnerKind;
    /**
     * 
     * @type {CapabilitiesGet200ResponseInnerAuth}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'auth': CapabilitiesGet200ResponseInnerAuth;
    /**
     * 
     * @type {Array<string>}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'requiredScopes': Array<string>;
    /**
     * 
     * @type {Array<CapabilitiesGet200ResponseInnerCapabilitiesInner>}
     * @memberof CapabilitiesGet200ResponseInner
     */
    'capabilities': Array<CapabilitiesGet200ResponseInnerCapabilitiesInner>;
}
/**
 * 
 * @export
 * @interface CapabilitiesGet200ResponseInnerAuth
 */
export interface CapabilitiesGet200ResponseInnerAuth {
}
/**
 * 
 * @export
 * @interface CapabilitiesGet200ResponseInnerCapabilitiesInner
 */
export interface CapabilitiesGet200ResponseInnerCapabilitiesInner {
    /**
     * Capability identifier, e.g. chat.post
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInner
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInner
     */
    'description': string;
    /**
     * 
     * @type {any}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInner
     */
    'paramsSchema': any;
    /**
     * 
     * @type {any}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInner
     */
    'resultSchema': any;
    /**
     * 
     * @type {Array<CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner>}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInner
     */
    'promptVersions': Array<CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner>;
}
/**
 * 
 * @export
 * @interface CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner
 */
export interface CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner {
    /**
     * Prompt version tag (semver or date)
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner
     */
    'modelHint'?: string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner
     */
    'system': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner
     */
    'user'?: string;
    /**
     * 
     * @type {Array<CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner>}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInner
     */
    'fewShot'?: Array<CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner>;
}
/**
 * 
 * @export
 * @interface CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner
 */
export interface CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner {
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner
     */
    'user': string;
    /**
     * 
     * @type {string}
     * @memberof CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner
     */
    'assistant': string;
}
/**
 * 
 * @export
 * @interface CapabilitiesGet200ResponseInnerKind
 */
export interface CapabilitiesGet200ResponseInnerKind {
}
/**
 * 
 * @export
 * @interface HealthGet200Response
 */
export interface HealthGet200Response {
    /**
     * 
     * @type {HealthGet200ResponseStatus}
     * @memberof HealthGet200Response
     */
    'status': HealthGet200ResponseStatus;
    /**
     * 
     * @type {string}
     * @memberof HealthGet200Response
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof HealthGet200Response
     */
    'version': string;
    /**
     * 
     * @type {number}
     * @memberof HealthGet200Response
     */
    'uptime': number;
    /**
     * 
     * @type {HealthGet200ResponseDependencies}
     * @memberof HealthGet200Response
     */
    'dependencies': HealthGet200ResponseDependencies;
}
/**
 * 
 * @export
 * @interface HealthGet200ResponseDependencies
 */
export interface HealthGet200ResponseDependencies {
    /**
     * 
     * @type {HealthGet200ResponseDependenciesDatabase}
     * @memberof HealthGet200ResponseDependencies
     */
    'database': HealthGet200ResponseDependenciesDatabase;
    /**
     * 
     * @type {HealthGet200ResponseDependenciesDatabase}
     * @memberof HealthGet200ResponseDependencies
     */
    'auth0': HealthGet200ResponseDependenciesDatabase;
}
/**
 * 
 * @export
 * @interface HealthGet200ResponseDependenciesDatabase
 */
export interface HealthGet200ResponseDependenciesDatabase {
}
/**
 * 
 * @export
 * @interface HealthGet200ResponseStatus
 */
export interface HealthGet200ResponseStatus {
}
/**
 * 
 * @export
 * @interface PromptProviderCapabilityVersionGet200Response
 */
export interface PromptProviderCapabilityVersionGet200Response {
    /**
     * 
     * @type {string}
     * @memberof PromptProviderCapabilityVersionGet200Response
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof PromptProviderCapabilityVersionGet200Response
     */
    'modelHint'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromptProviderCapabilityVersionGet200Response
     */
    'system': string;
    /**
     * 
     * @type {string}
     * @memberof PromptProviderCapabilityVersionGet200Response
     */
    'user'?: string;
    /**
     * 
     * @type {Array<CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner>}
     * @memberof PromptProviderCapabilityVersionGet200Response
     */
    'fewShot'?: Array<CapabilitiesGet200ResponseInnerCapabilitiesInnerPromptVersionsInnerFewShotInner>;
}
/**
 * 
 * @export
 * @interface PromptProviderCapabilityVersionGet404Response
 */
export interface PromptProviderCapabilityVersionGet404Response {
    /**
     * 
     * @type {string}
     * @memberof PromptProviderCapabilityVersionGet404Response
     */
    'message': string;
}

/**
 * CapabilitiesApi - axios parameter creator
 * @export
 */
export const CapabilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the catalog of provider capabilities available to the platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capabilitiesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/capabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CapabilitiesApi - functional programming interface
 * @export
 */
export const CapabilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CapabilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the catalog of provider capabilities available to the platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async capabilitiesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CapabilitiesGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.capabilitiesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CapabilitiesApi.capabilitiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CapabilitiesApi - factory interface
 * @export
 */
export const CapabilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CapabilitiesApiFp(configuration)
    return {
        /**
         * Returns the catalog of provider capabilities available to the platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capabilitiesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CapabilitiesGet200ResponseInner>> {
            return localVarFp.capabilitiesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CapabilitiesApi - object-oriented interface
 * @export
 * @class CapabilitiesApi
 * @extends {BaseAPI}
 */
export class CapabilitiesApi extends BaseAPI {
    /**
     * Returns the catalog of provider capabilities available to the platform.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapabilitiesApi
     */
    public capabilitiesGet(options?: RawAxiosRequestConfig) {
        return CapabilitiesApiFp(this.configuration).capabilitiesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Comprehensive health check with dependencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Kubernetes liveness probe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/live`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Kubernetes readiness probe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Comprehensive health check with dependencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Service information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async infoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.infoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.infoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Kubernetes liveness probe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.liveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Kubernetes readiness probe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Comprehensive health check with dependencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthGet200Response> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Service information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthGet200Response> {
            return localVarFp.infoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Kubernetes liveness probe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthGet200Response> {
            return localVarFp.liveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Kubernetes readiness probe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readyGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthGet200Response> {
            return localVarFp.readyGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Comprehensive health check with dependencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public infoGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).infoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Kubernetes liveness probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public liveGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).liveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Kubernetes readiness probe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readyGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readyGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PromptApi - axios parameter creator
 * @export
 */
export const PromptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a specific prompt version for a capability.
         * @param {string} provider 
         * @param {string} capability 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promptProviderCapabilityVersionGet: async (provider: string, capability: string, version: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('promptProviderCapabilityVersionGet', 'provider', provider)
            // verify required parameter 'capability' is not null or undefined
            assertParamExists('promptProviderCapabilityVersionGet', 'capability', capability)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('promptProviderCapabilityVersionGet', 'version', version)
            const localVarPath = `/prompt/{provider}/{capability}/{version}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)))
                .replace(`{${"capability"}}`, encodeURIComponent(String(capability)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromptApi - functional programming interface
 * @export
 */
export const PromptApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromptApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a specific prompt version for a capability.
         * @param {string} provider 
         * @param {string} capability 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promptProviderCapabilityVersionGet(provider: string, capability: string, version: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptProviderCapabilityVersionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promptProviderCapabilityVersionGet(provider, capability, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptApi.promptProviderCapabilityVersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromptApi - factory interface
 * @export
 */
export const PromptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromptApiFp(configuration)
    return {
        /**
         * Retrieve a specific prompt version for a capability.
         * @param {string} provider 
         * @param {string} capability 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promptProviderCapabilityVersionGet(provider: string, capability: string, version: string, options?: RawAxiosRequestConfig): AxiosPromise<PromptProviderCapabilityVersionGet200Response> {
            return localVarFp.promptProviderCapabilityVersionGet(provider, capability, version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromptApi - object-oriented interface
 * @export
 * @class PromptApi
 * @extends {BaseAPI}
 */
export class PromptApi extends BaseAPI {
    /**
     * Retrieve a specific prompt version for a capability.
     * @param {string} provider 
     * @param {string} capability 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptApi
     */
    public promptProviderCapabilityVersionGet(provider: string, capability: string, version: string, options?: RawAxiosRequestConfig) {
        return PromptApiFp(this.configuration).promptProviderCapabilityVersionGet(provider, capability, version, options).then((request) => request(this.axios, this.basePath));
    }
}



